--!optimize 2
--!strict
do
	-- For runtimes that cache the requires
	require("@self/table")
end

@native
local function trim(data: buffer, pos: number, size: number)
	if size == pos then
		return data
	end
	local newBuf = buffer.create(pos)
	buffer.copy(newBuf, 0, data, 0, pos)
	return newBuf
end

local BufferSerializer = {}
local link = require("@self/link")

local serialModules = table.freeze({
	["nil"] = require("@self/nil").serialize,
	boolean = require("@self/boolean").serialize,
	buffer = require("@self/buffer").serialize,
	string = require("@self/string").serialize,
	number = require("@self/number").serialize,
	vector = require("@self/vector").serialize,
	table = require("@self/table").serialize,
	userdata = require("@self/userdata").serialize,
})
local deserialModules = table.freeze({
	["nil"] = require("@self/nil").deserialize,
	boolean = require("@self/boolean").deserialize,
	buffer = require("@self/buffer").deserialize,
	string = require("@self/string").deserialize,
	number = require("@self/number").deserialize,
	vector = require("@self/vector").deserialize,
	table = require("@self/table").deserialize,
	userdata = require("@self/userdata").deserialize,
})
local pairModules = link.values :: { [any]: any }

local calcId = link.calculateId
local linkType = link.type

type Serialize = (
	value: any,
	buf: buffer?,
	pos: number,
	size: number
) -> (buffer, number, number)
type Deserialize = (value: buffer, pos: number) -> (any, number)
type Pair = {
	[any]: any,
	Write: { [any]: any },
}

--[[
	Returns the value as a buffer
	
	@param value the value to serialize
	
	@return a buffer representing the serialized value
]]
function BufferSerializer.serialize(value: any): buffer
	local typeValue = type(value)
	if typeValue == "function" or typeValue == "thread" then
		typeValue = "nil"
	end

	local serial: Serialize = (serialModules :: any)[typeValue]

	return trim(serial(value, nil, 0, 0))
end

--[[
	Returns the original value within the buffer

	@param value the buffer containing the original value
	
	@return the original value
]]
function BufferSerializer.deserialize(value: buffer): any
	local pointer = buffer.readu8(value, 0)
	if pointer == 0 then
		return nil
	end

	pointer = linkType(pointer)

	local deserial: Deserialize = (deserialModules :: any)[pointer]

	local originalData = deserial(value, 0)
	return originalData
end

-- narrows the type emitted by `type(any): string` would like for it to error
type TYPES = "userdata" | "number" | "string" | "vector"

--[[
	Pairs, or links, an id(entifier) to a value.

	- When a value rawequal to a linked value is serialized, the id is stored instead of the value.
	 Upon deserialization, the id is replaced with the linked value.
		- To save bytes, pairs are only recognized in the context of table (de)serialization.
		- Ids are stored in tandem with their value initially, so there is no requirement for consistent
		 pairing of ids to values.
		- Userdata is not always rawequal, and when possible should be shared directly to ensure proper linkage.
			- See [userdata.luau](./userdata.luau) for information about supporting userdata that isn't linked, whether
			 or not by choice.

	- Linking a value to an id causes the value to be stored as 1-2 bytes, depending on the number associated
	 with the id and the value's type.

	| **Type**   | **Id Range**    | **Cost** |
	|------------|-----------------|----------|
	| `string`   | 1-64            | 1 byte   |
	| `number`   | 1-32            | 1 byte   |
	| `vector`   | 1-32            | 1 byte   |
	| `userdata` | 1-16            | 1 byte   |
	|            |                 |          |
	| `string`   | 65-1343         | 2 bytes  |
	| `number`   | 33-1055         | 2 bytes  |
	| `vector`   | 33-1055         | 2 bytes  |
	| `userdata` | 16-1039         | 2 bytes  |

	**Recommendations:**
	- Calculate the word frequency of your dataset to determine which values to link to what ids.
	- Ensure that linked values cannot be stored for less than or equal to the associated id cost (in bytes).
	- Spare a range of ids for future additions.

	<!-- TODO: Remove the comment once RISKS.md is complete.
	<sub>See [RISKS.md](../RISKS.md) to understand the risks when using `BufferSerializer.pair`.</sub>
	-->

	**Example**
	```luau
	 -- 5 is between 1 and 64, so it will take 1 byte to store "Foo" from now on
	BufferSerializer.pair(5, "Foo")
	-- 75 is between 65 and 1343, so it will take 2 bytes to store "Bar" from now on
	BufferSerializer.pair(75, "Bar")
	```

	@param id the identifier
	@param value the value

	@error Invalid type: When the value is not a string, number, vector, or userdata
	@error Invalid id: When the id is not an integer
	@error Invalid id: When the id is not between 1 and N, where N depends on the value's type
	@error Invalid value: When the value is NaN
	@error Invalid value: When the value is a built-in constant, i.e. "", 0, 1, etc
]]
function BufferSerializer.pair(id: number, value: any): ()
	local typeV = type(value) :: TYPES
	local maxId = if typeV == "string"
		then 1343
		elseif typeV == "number" then 1055
		elseif typeV == "vector" then 1055
		elseif typeV == "userdata" then 1039
		else 0

	assert(
		maxId ~= 0,
		`Invalid type {typeV} (must be string | number | vector | userdata)`
	)
	assert(
		type(id) == "number" and id % 1 == 0 and id == id,
		`Invalid id {id} (must be integer)`
	)
	assert(
		id >= 1 and id <= maxId,
		`Invalid id {id} (must be between 1 and {maxId})`
	)
	assert(value == value, `Invalid value {value} (must be non-nan)`)
	assert(
		typeV ~= "number" or value ~= 0 and value ~= 1,
		`Invalid value {value} (cannot be a built-in [0 or 1])`
	)
	assert(
		typeV ~= "string" or value ~= "",
		`Invalid value {value} (cannot be a built-in [""])`
	)
	assert(
		typeV ~= "vector"
			or value ~= vector.zero
				and value ~= vector.one
				and value ~= vector.create(0, 0, 1)
				and value ~= vector.create(0, 1, 0)
				and value ~= vector.create(0, 1, 1)
				and value ~= vector.create(1, 0, 0)
				and value ~= vector.create(1, 0, 1)
				and value ~= vector.create(1, 1, 0),
		`Invalid value {value} (cannot be a built-in)`
	)

	pairModules[value] = calcId(id, typeV)
end

return table.freeze(BufferSerializer)
